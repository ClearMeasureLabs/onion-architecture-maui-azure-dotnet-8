trigger:
    - "second-azdo-pipeline"
    
variables:
    major: 1
    minor: 1
name: $(major).$(minor).$(Rev:r)


stages:
- stage: 'Integration_Build'
  displayName: 'Build Application'

  jobs:
    - job: 'Build'
      displayName: 'Build job'
      pool:
        vmImage: 'windows-latest'
      variables:
      - group: Integration-Build
      steps:
      # Dependencies
      - task: UseDotNet@2
        displayName: 'Install SDK 8.0.100'
        inputs:
          packageType: 'sdk'
          version: '8.0.100'
      - task: UseDotNet@2
        inputs:
          packageType: 'runtime'
          version: '6.0.0'
      - task: UseDotNet@2
        inputs:
          packageType: 'runtime'
          version: '8.0.0'
      # Set environment variables
      - task: PowerShell@2
        inputs:
          targetType: 'inline'
          script: |
            [System.Environment]::SetEnvironmentVariable('Version','$(Build.BuildNumber)')
            echo $env:Version
            echo $(Build.BuildNumber)

      - task: PowerShell@2
        displayName: Build.ps1
        inputs:
          targetType: filePath
          filePath: ./build.ps1
          arguments: '; CIBuild'
      - task: PublishTestResults@2
        displayName: 'Publish Test Results ./build/test/*.trx'
        inputs:
          testResultsFormat: VSTest
          testResultsFiles: 'build/test/**/*.trx'
          mergeTestResults: true
          testRunTitle: 'CI Tests'
        continueOnError: true
        condition: succeededOrFailed()
      - task: PublishCodeCoverageResults@1
        displayName: 'Publish code coverage UnitTests'
        inputs:
          codeCoverageTool: Cobertura
          summaryFileLocation: '$(System.DefaultWorkingDirectory)/**/build/test/**/In/**/coverage.cobertura.xml'
      - task: NuGetCommand@2
        inputs:
          command: 'push'
          packagesToPush: '.\build\*.nupkg'
          publishVstsFeed: '$(AzureFeedName)'

    - job: 'DockerBuildandPush'
      pool:
        vmImage: 'ubuntu-latest'
      variables:
        - group: Pure-Azure-Build
      dependsOn: Build
 
      steps:
      - task: DownloadPackage@1
        displayName: 'Download UI Package'
        inputs:
          packageType: 'nuget'
          feed: '$(AzureFeedName)'
          view: 'Local'
          definition: 'ChurchBulletin.UI'
          version: '$(Build.BuildNumber)'
          downloadPath: '$(System.DefaultWorkingDirectory)/built'
          extract: true

      - task: Docker@2
        inputs:
          containerRegistry: 'OnionArchitectureMauiDotnet8AzDO'
          repository: 'ChurchBulletin.UI'
          command: 'buildAndPush'
          Dockerfile: '**/Dockerfile'
          tags: |
            $(Build.BuildNumber)

# Deploying to TDD
- stage: 'TDD'
  displayName: 'TDD'
  jobs:
    - deployment: 'DeployToTDD'
      pool:
        vmImage: 'windows-latest'
      variables:
      - group: Pure-Azure-Build-TDD
      - name: branch
        value: $[coalesce(variables['system.pullRequest.sourceBranch'], variables['build.sourceBranch'])]
      #- name: $(environmentName)ResourceGroup
      #  value: '$(ResourceGroupName)-TDD-$(Build.BuildNumber)'
      - name: ContainerImage
        value: '$(RegistryLoginServer)/churchbulletin.ui:$(Build.BuildNumber)'
      #environment: 'TDD'
      strategy:
        runOnce:
          deploy:
            steps:
            - template: .\deploy-env.yml
              parameters: 
                AzureFeedName: $(AzureFeedName)
                AzureLocation: $(AzureLocation)
                ContainerAppName: $(ContainerAppName)
                ContainerAppUrl: $(ContainerAppUrl)
                ContainerRegistryPassword: $(ContainerRegistryPassword)
                ContainerImage: $(ContainerImage)
                DatabaseAction: $(DatabaseAction)
                DatabaseName: $(DatabaseName)
                DatabasePassword: $(DatabasePassword)
                DatabaseUser: $(DatabaseUser)
                DatabasePerformanceLevel: $(DatabasePerformanceLevel)
                environmentName: "TDD"
                HttpPort: '8080'
                ResourceGroupName: $(ResourceGroupName)
                RegistryLoginServer: $(RegistryLoginServer)

- stage: 'DeleteTDD'
  #condition: and(succeeded(), eq(variables['ResourceGroupName'], onion-architecture-maui-azure-dotnet-8-TDD-$(Build.BuildNumber) ))
  displayName: 'DeleteTDD'
  jobs:
    - deployment: 'DeleteTDD'
      pool:
        vmImage: 'windows-latest'
      variables:
      - group: Pure-Azure-Build-TDD
      - name: branch
        value: $[coalesce(variables['system.pullRequest.sourceBranch'], variables['build.sourceBranch'])]
      #- name: $(environmentName)ResourceGroup
      #  value: '$(ResourceGroupName)-TDD-$(Build.BuildNumber)'
      - name: ContainerImage
        value: '$(RegistryLoginServer)/churchbulletin.ui:$(Build.BuildNumber)'
      #environment: 'TDD'
      strategy:
        runOnce:
          deploy:
            steps:
            - template: .\delete-tdd.yml
              parameters: 
                ResourceGroupName: $(ResourceGroupName)

- stage: 'UAT'
  displayName: 'UAT'
  jobs:
    - deployment: 'DeployToUAT'
      pool:
        vmImage: 'windows-latest'
      variables:
      - group: Pure-Azure-Build-UAT
      - name: branch
        value: $[coalesce(variables['system.pullRequest.sourceBranch'], variables['build.sourceBranch'])]
      #- name: $(environmentName)ResourceGroup
      #  value: '$(ResourceGroupName)-UAT-$(Build.BuildNumber)'
      - name: ContainerImage
        value: '$(RegistryLoginServer)/churchbulletin.ui:$(Build.BuildNumber)'
      #environment: 'UAT'
      strategy:
        runOnce:
          deploy:
            steps:
            - template: .\deploy-env.yml
              parameters: 
                AcrContainerAppId: $(AcrContainerAppId)
                AzureFeedName: $(AzureFeedName)
                AzureLocation: $(AzureLocation)
                ContainerAppName: $(ContainerAppName)
                ContainerAppUrl: $(ContainerAppUrl)
                ContainerRegistryPassword: $(ContainerRegistryPassword)
                ContainerImage: $(ContainerImage)
                DatabaseAction: $(DatabaseAction)
                DatabaseName: $(DatabaseName)
                DatabasePassword: $(DatabasePassword)
                DatabaseUser: $(DatabaseUser)
                DatabasePerformanceLevel: $(DatabasePerformanceLevel)
                deployAmazon: $(deployAmazon)
                deployApple: $(deployApple)
                deployGoogle: $(deployGoogle)
                environmentName: "UAT"
                HttpPort: '8080'
                ResourceGroupName: $(ResourceGroupName)
                RegistryLoginServer: $(RegistryLoginServer)

- stage: 'DeployAmazonApp'
  condition:  and(succeeded(), eq(variables.deployAmazon, true))
  displayName: 'DeployAmazonApp'
  jobs:
    - deployment: 'DeployAmazonApp'
      pool:
        vmImage: 'windows-latest'
      variables:
      - group: Pure-Azure-Build-UAT
      - name: branch
        value: $[coalesce(variables['system.pullRequest.sourceBranch'], variables['build.sourceBranch'])]
      #- name: $(environmentName)ResourceGroup
      #  value: '$(ResourceGroupName)-UAT-$(Build.BuildNumber)'
      - name: ContainerImage
        value: '$(RegistryLoginServer)/churchbulletin.ui:$(Build.BuildNumber)'
      #environment: 'UAT'
      strategy:
        runOnce:
          deploy:
            steps:
            - task: AzureCLI@2
              displayName: 'Deploy Amazon App'
              inputs:
                azureSubscription: 'onion-architecture-maui-azure-dotnet-8-pure-azdo'
                scriptType: 'ps'
                scriptLocation: 'inlineScript'
                inlineScript: |
                  Write-Host "This is where the Amazon app deploy will happen"

- stage: 'DeployAppleApp'
  condition:  and(succeeded(), eq($variables.deployApple, true))
  displayName: 'DeployAppleApp'
  jobs:
    - deployment: 'DeployApplenApp'
      pool:
        vmImage: 'windows-latest'
      variables:
      - group: Pure-Azure-Build-UAT
      - name: branch
        value: $[coalesce(variables['system.pullRequest.sourceBranch'], variables['build.sourceBranch'])]
      #- name: $(environmentName)ResourceGroup
      #  value: '$(ResourceGroupName)-UAT-$(Build.BuildNumber)'
      - name: ContainerImage
        value: '$(RegistryLoginServer)/churchbulletin.ui:$(Build.BuildNumber)'
      #environment: 'UAT'
      strategy:
        runOnce:
          deploy:
            steps:
            - task: AzureCLI@2
              displayName: 'Deploy Apple App'
              inputs:
                azureSubscription: 'onion-architecture-maui-azure-dotnet-8-pure-azdo'
                scriptType: 'ps'
                scriptLocation: 'inlineScript'
                inlineScript: |
                  Write-Host "This is where the Apple app deploy will happen"

- stage: 'DeployGooleApp'
  condition:  and(succeeded(), eq(variables.deployGoogle, true))
  displayName: 'DeployGoogleApp'
  jobs:
    - deployment: 'DeployGoogleApp'
      pool:
        vmImage: 'windows-latest'
      variables:
      - group: Pure-Azure-Build-UAT
      - name: branch
        value: $[coalesce(variables['system.pullRequest.sourceBranch'], variables['build.sourceBranch'])]
      #- name: $(environmentName)ResourceGroup
      #  value: '$(ResourceGroupName)-UAT-$(Build.BuildNumber)'
      - name: ContainerImage
        value: '$(RegistryLoginServer)/churchbulletin.ui:$(Build.BuildNumber)'
      #environment: 'UAT'
      strategy:
        runOnce:
          deploy:
            steps:
            - task: AzureCLI@2
              displayName: 'Deploy Google App'
              inputs:
                azureSubscription: 'onion-architecture-maui-azure-dotnet-8-pure-azdo'
                scriptType: 'ps'
                scriptLocation: 'inlineScript'
                inlineScript: |
                  Write-Host "This is where the Google app deploy will happen"