parameters:
  AcrContainerAppId: ''
  AzureFeedName: ''
  AzureLocation: ''
  ContainerAppName: ''
  ContainerAppUrl: ''
  ContainerRegistryPassword: ''
  ContainerImage: ''
  DatabaseAction: ''
  DatabaseName: ''
  DatabasePassword: ''
  DatabaseUser: ''
  DatabasePerformanceLevel: ''
  environmentName: ''
  HttpPort: ''
  ResourceGroupName: ''
  RegistryLoginServer: ''

- stage: deploy_env

  jobs:
  - deployment: Deploy
    pool:
      name: 'windows-latest'

    strategy:
      runOnce:
        deploy:

          steps:
          - task: AzureCLI@2
            displayName: 'Query and store subscription id for unique resource name'
            inputs:
              azureSubscription: 'onion-architecture-maui-azure-dotnet-8-pure-azdo'
              scriptType: 'bash'
              scriptLocation: 'inlineScript'
              inlineScript: |
                SUBSCRIPTION_ID=$(az account show --query id --output tsv)
                echo "##vso[task.setvariable variable=SubscriptionId]$SUBSCRIPTION_ID"

          - checkout: self

          - task: AzureCLI@2
            displayName: 'Create resource group'
            inputs:
              azureSubscription: 'onion-architecture-maui-azure-dotnet-8-pure-azdo'
              scriptType: 'ps'
              scriptLocation: 'inlineScript'
              inlineScript: az group create --name $(ResourceGroupName) --location $(AzureLocation)

          - task: PowerShell@2
            displayName: 'Generate version integer for database server name'
            inputs:
              targetType: 'inline'
              script: |
                [System.Environment]::SetEnvironmentVariable('Version','$(Build.BuildNumber)')
                $splitVersion = $env:Version -split "\."
                $stringVer = $splitVersion[-1]
                $intVer = [int]$stringVer
                Write-Host "##vso[task.setvariable variable=IntegerVersion]$intVer"

          - task: AzureResourceGroupDeployment@2
            displayName: 'Create database resource in Azure'
            inputs:
              azureSubscription: 'onion-architecture-maui-azure-dotnet-8-pure-azdo'
              resourceGroupName: $(TDDResourceGroup)
              location: $(AzureLocation)
              csmFile: src/Database/DatabaseARM.json
              overrideParameters: -databaseserverName $(SubscriptionId)-dotnet8-tdd-$(IntegerVersion) -databaseLogin $(DatabaseUserTest) -databaseLoginPassword $(DatabasePasswordTest) -skuCapacity 1 -databaseName $(DatabaseNameTest) -requestedServiceObjectiveName $(DatabasePerformanceLevel)

          - task: PowerShell@2
            displayName: 'Create database schema'
            inputs:
              targetType: filePath
              filePath: src/Database/scripts/UpdateAzurePipelineSql.ps1
              arguments: -DatabaseServer '$(SubscriptionId)-dotnet8-tdd-$(IntegerVersion).database.windows.net' -DatabaseName '$(DatabaseNameTest)' -DatabaseAction '$(DatabaseAction)' -DatabaseUser '$(DatabaseUserTest)' -DatabasePassword '$(DatabasePasswordTest)'

          - task: AzureCLI@2
            displayName: 'Get database connection string'
            inputs: 
              azureSubscription: 'onion-architecture-maui-azure-dotnet-8-pure-azdo'
              scriptType: 'ps'
              scriptLocation: 'inlineScript' 
              inlineScript: |
                az config set extension.use_dynamic_install=yes_without_prompt
                $connstring = az sql db show-connection-string --server $(SubscriptionId)-dotnet8-tdd-$(IntegerVersion) --name $(DatabaseNameTest) --client ado.net
                $connstring = $connstring -replace '<username>', '$(DatabaseUserTest)' -replace '<password>', '$(DatabasePasswordTest)' -replace '"', ''
                Write-Host "##vso[task.setvariable variable=DbConnString]$connstring"

          - task: AzureResourceGroupDeployment@2
            displayName: 'Create container app environment'
            inputs:
              azureSubscription: 'onion-architecture-maui-azure-dotnet-8-pure-azdo'
              resourceGroupName: $(TDDResourceGroup)
              location: $(AzureLocation)
              csmFile: src/Core/ContainerEnvironmentARM.json
              overrideParameters: -location $(AzureLocation) -environment_name $(ResourceGroupName)-cae

          - task: AzureResourceGroupDeployment@2
            displayName: 'Create container app'
            inputs:
              azureSubscription: 'onion-architecture-maui-azure-dotnet-8-pure-azdo'
              resourceGroupName: $(TDDResourceGroup)
              location: $(AzureLocation)
              csmFile: src/Core/ContainerARM.json
              overrideParameters: -containerappName "$(ContainerAppNameTest)" -location "$(AzureLocation)" -environment_name "$(ResourceGroupName)-TDD-cae" -container_image "$(RegistryLoginServer)/churchbulletin.ui:$(Build.BuildNumber)" -registry_password "$(ContainerRegistryPassword)" -connection_string "$(DbConnString)" -http_port "$(HttpPort)" -registry_login_server "$(RegistryLoginServer)" -app_id "$(AcrContainerAppId)"

          - task: AzureCLI@2
            displayName: 'Get the Fully Qualified Domain Name for the container app'
            inputs:
              azureSubscription: 'onion-architecture-maui-azure-dotnet-8-pure-azdo'
              scriptType: 'ps'
              scriptLocation: 'inlineScript'
              inlineScript: |
                $fqdn = az containerapp show --name $(ContainerAppNameTest) --resource-group $(TDDResourceGroup) --query properties.configuration.ingress.fqdn
                $fqdn = $fqdn -replace '"', ''
                [System.Environment]::SetEnvironmentVariable("containerAppURL", $fqdn, "User")
                Write-Host "##vso[task.setvariable variable=fullyQualifiedDomainName]$fqdn"
                echo $fqdn

          - task: AzureCLI@2
            displayName: 'Add revision to container app'
            inputs:
              azureSubscription: 'onion-architecture-maui-azure-dotnet-8-pure-azdo'
              scriptType: 'ps'
              scriptLocation: 'inlineScript'
              inlineScript: az containerapp update --name $(ContainerAppNameTest) --resource-group $(TDDResourceGroup) --image $(ContainerImage) --set-env-vars ConnectionStrings__SqlConnectionString="$(DbConnString)" HTTP_PORT=$(HttpPort) 

          - task: PowerShell@2
            displayName: 'Check version of deployed app'
            inputs:
              targetType: 'filePath'
              filePath: src/UI/Server/CheckVersion.ps1
              arguments: -server '$(fullyQualifiedDomainName)' -version '$(Build.BuildNumber)'

          - task: PowerShell@2
            displayName: 'Perform healthcheck for server on container app'
            inputs:
              targetType: 'filePath'
              filePath: src/UI/Server/CallHealthCheckEndpoint.ps1
              arguments: -server '$(fullyQualifiedDomainName)'

          - task: DownloadPackage@1
            displayName: 'Download Acceptance Test Package'
            inputs:
              packageType: 'nuget'
              feed: '$(AzureFeedName)'
              view: 'Local'
              definition: 'ChurchBulletin.AcceptanceTests'
              version: '$(Build.Buildnumber)'
              downloadPath: '$(System.DefaultWorkingDirectory)/tests'
              extract: true

          - task: PowerShell@2
            displayName: 'Download Playwright'
            inputs:
              targetType: filePath
              filePath: ./tests/playwright.ps1
              arguments: 'install'

          - task: VSTest@2
            displayName: 'VsTest - AcceptanceTests'
            inputs:
              testSelector: 'testAssemblies'
              testAssemblyVer2: |
                **\*AcceptanceTests.dll
                !**\*TestAdapter.dll
                !**\obj\**
                searchFolder: '$(System.DefaultWorkingDirectory)/tests'
              uiTests: true
              codeCoverageEnabled: true
              testRunTitle: 'Acceptance Tests'
              diagnosticsEnabled: True

- stage: delete_tdd
  condition: eq({{ paramters.environmentName }}, "TDD")
  jobs:
  
  - deployment: Deploy
    pool:
      name: 'windows-latest'

    strategy:
      runOnce:
        deploy:

          steps:
          - template: .\delete-tdd.yml
            parameters:
              ResourceGroupName: '${{ parameters.ResourceGroupName }}'

 